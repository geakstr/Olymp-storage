import java.util.*;
import java.io.*;

import static java.lang.Math.*;

public class Main {
	BufferedReader in;
	PrintWriter out;
	StringTokenizer st;

	static class State {
	    int length;
	    int link;
	    int endpos;
	    int[] next = new int[256];
	    {
	      Arrays.fill(next, -1);
	    }
	    List<Integer> ilink = new ArrayList<Integer>(0);
	  };

	  State[] st;
	  int size;
	  int last;
	  int lastp;

	  void saExtend(char c) {
	    int nlast = size++;
	    st[nlast] = new State();
	    st[nlast].length = st[last].length + 1;
	    st[nlast].endpos = st[last].length;
	    int p;
	    for (p = last; p != -1 && st[p].next[c] == -1; p = st[p].link) {
	      st[p].next[c] = nlast;
	    }
	    if (p == -1) {
	      st[nlast].link = 0;
	    } else {
	      int q = st[p].next[c];
	      if (st[p].length + 1 == st[q].length)
	        st[nlast].link = q;
	      else {
	        int clone = size++;
	        st[clone] = new State();
	        st[clone].length = st[p].length + 1;
	        st[clone].next = st[q].next.clone();
	        st[clone].link = st[q].link;
	        for (; p != -1 && st[p].next[c] != -1 && st[p].next[c] == q; p = st[p].link)
	          st[p].next[c] = clone;
	        st[q].link = clone;
	        st[nlast].link = clone;
	        st[clone].endpos = -1;
	      }
	    }
	    last = nlast;
	  }

	void solve() throws IOException {
		String s = ns();
		for (int i = 0; i < s.length(); i++) {
			state[i] = new State(0, 0, new HashMap<Character, Integer>());
		}
		sa_init();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			sa_extend(c);

			for (int j = 0; j < state.length; j++) {
				out.println(state[j].len + " " + state[j].link);
				for (Character next : state[j].next.keySet()) {
					out.print(next + " " + state[j].next.get(next));
				}
			}
		}
	}

	public Main() throws IOException {
		Locale.setDefault(Locale.US);
		in = new BufferedReader(new InputStreamReader(System.in));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		solve();
		in.close();
		out.close();
	}

	String ns() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	Integer ni() throws IOException {
		return Integer.valueOf(ns());
	}

	Double nd() throws IOException {
		return Double.valueOf(ns());
	}

	Long nl() throws IOException {
		return Long.valueOf(ns());
	}

	public static void main(String[] args) throws IOException {
		new Main();
	}
}
