import java.io.*;
import java.util.*;

public class Solution {
	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	void solve() throws IOException {
		String instr = in.readLine();
		int[] s = new int[instr.length()];
		for (int i = 0; i < instr.length(); i++) {
			s[i] = instr.charAt(i) - 48;
		}

		Map<Integer, ArrayList<String>> m = new HashMap<Integer, ArrayList<String>>();

		int n = ni();
		for (int i = 0; i < n; i++) {
			String t = ns();
			int len = t.length();

			ArrayList<String> tmp = null;
			if (m.containsKey(len)) {
				tmp = m.get(len);
			} else {
				tmp = ArrayList<String>;
			}
			tmp.add(t);
			m.put(len, tmp);
		}

		for (Map.Entry<Integer, TreeSet<String>> entry : m.entrySet()) {
			for (String str : entry.getValue()) {
				out.println(str);
			}
		}
	}

	Solution() throws IOException {
		Locale.setDefault(Locale.US);
		in = new BufferedReader(new InputStreamReader(System.in));
		// in = new BufferedReader(new FileReader("tests"));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		solve();
		in.close();
		out.close();
	}

	String ns() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	int ni() throws IOException {
		return Integer.valueOf(ns());
	}

	double nd() throws IOException {
		return Double.valueOf(ns());
	}

	long nl() throws IOException {
		return Long.valueOf(ns());
	}

	public static void main(String[] args) throws IOException {
		new Solution();
	}
}
