



import java.io.*;
import java.util.*;

public class Solution {
	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	long dp[][];

	long rec(int l, int r) {
		if (l >= r)
			return 1;

		if (dp[l][r] != -1)
			return dp[l][r];

		long ret = rec(l + 1, r - 1);
		for (int i = l + 1; i < r; i += 2)
			ret += rec(l + 1, i - 1) * rec(i + 1, r);

		dp[l][r] = ret;

		return dp[l][r];
	}

	void solve() throws IOException {
		int n = ni();

		dp = new long[n + 1][n + 1];

		for (int i = 0; i < dp.length; i++)
			Arrays.fill(dp[i], -1);

		out.println(rec(0, n - 1));
	}

	Solution() throws IOException {
		Locale.setDefault(Locale.US);
		in = new BufferedReader(new InputStreamReader(System.in));
		// in = new BufferedReader(new FileReader("tests"));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		solve();
		in.close();
		out.close();
	}

	String ns() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	int ni() throws IOException {
		return Integer.valueOf(ns());
	}

	double nd() throws IOException {
		return Double.valueOf(ns());
	}

	long nl() throws IOException {
		return Long.valueOf(ns());
	}

	public static void main(String[] args) throws IOException {
		new Solution();
	}
}