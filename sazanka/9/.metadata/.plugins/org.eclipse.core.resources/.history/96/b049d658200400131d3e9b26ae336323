import java.io.*;
import java.util.*;

public class Solution {
	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	char[] a = "aaa$".toCharArray();
	int n;

	int inf = 1000000000;
	int t[][];
	int l[], r[], p[], s[];
	int tv, tp, ts, la;

	void ukadd(int c) {

		boolean flag = false;
		suff: if (!flag) {
			while (true) {
				if (r[tv] < tp) {
					if (t[tv][c] == -1) {
						t[tv][c] = ts;
						l[ts] = la;
						p[ts++] = tv;
						tv = s[tv];
						tp = r[tv] + 1;
						break suff;
					}
					tv = t[tv][c];
					tp = l[tv];
				}
				if (tp == -1 || c == a[tp] - 'a')
					tp++;
				else {
					l[ts + 1] = la;
					p[ts + 1] = ts;
					l[ts] = l[tv];
					r[ts] = tp - 1;
					p[ts] = p[tv];
					t[ts][c] = ts + 1;
					t[ts][a[tp] - 'a'] = tv;
					l[tv] = tp;
					p[tv] = ts;
					t[p[ts]][a[l[ts]] - 'a'] = ts;
					ts += 2;
					tv = s[p[ts - 2]];
					tp = l[ts - 2];
					while (tp <= r[ts - 2]) {
						tv = t[tv][a[tp] - 'a'];
						tp += r[tv] - l[tv] + 1;
					}
					if (tp == r[ts - 2] + 1) {
						s[ts - 2] = tv;
						flag = true;
						break suff;
					} else {
						s[ts - 2] = ts;
						tp = r[tv] - (tp - r[ts - 2]) + 2;
						break suff;
					}
				}
			}
		}
	}

	void build() {
		ts = 2;
		tv = 0;
		tp = 0;
		Arrays.fill(r, 0);
		s[0] = 1;
		l[0] = -1;
		r[0] = -1;
		l[1] = -1;
		r[1] = -1;
		Arrays.fill(t, -1);
		Arrays.fill(t[1], t[1] + 26);
	}

	void solve() throws IOException {

	}

	Solution() throws IOException {
		Locale.setDefault(Locale.US);
		in = new BufferedReader(new InputStreamReader(System.in));
		// in = new BufferedReader(new FileReader("in"));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		// out = new PrintWriter("out");
		solve();
		in.close();
		out.close();
	}

	String ns() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	int ni() throws IOException {
		return Integer.valueOf(ns());
	}

	double nd() throws IOException {
		return Double.valueOf(ns());
	}

	long nl() throws IOException {
		return Long.valueOf(ns());
	}

	public static void main(String[] args) throws IOException {
		new Solution();
	}
}
