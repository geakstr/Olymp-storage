import java.io.*;
import java.util.*;

public class Solution {
	BufferedReader in;
	StringTokenizer st;
	PrintWriter out;

	int n;
	int a[], t[];

	void permutation(int k) {
		for (int i = 0; i < n; i++)
			if (k == n)
				System.out.print(a[i] + (i < n - 1 ? " " : "\n"));
			else if (t[i] == 0) {
				a[k] = i + 1;
				t[i] = 1;
				permutation(k + 1);
				t[i] = 0;
			}
	}

	String rev(String s) {
		String ret = "";
		for (int i = s.length() - 1; i >= 0; i--) {
			ret += s.charAt(i);
		}
		return ret;
	}

	void solve() throws IOException {
		String s = in.readLine();

		n = 10;
		a = new int[n];
		t = new int[n];

		permutation(0);
	}

	Solution() throws IOException {
		Locale.setDefault(Locale.US);
		// in = new BufferedReader(new InputStreamReader(System.in));
		in = new BufferedReader(new FileReader("in"));
		out = new PrintWriter(new OutputStreamWriter(System.out));
		// out = new PrintWriter("out");
		solve();
		in.close();
		out.close();
	}

	String ns() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	int ni() throws IOException {
		return Integer.valueOf(ns());
	}

	double nd() throws IOException {
		return Double.valueOf(ns());
	}

	long nl() throws IOException {
		return Long.valueOf(ns());
	}

	public static void main(String[] args) throws IOException {
		new Solution();
	}
}
